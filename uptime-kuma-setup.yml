---
- name: Setup uptime-kuma container
  hosts: alderaan

  vars:
    container_name: "uptime-kuma"
    image: "docker.io/louislam/uptime-kuma:latest"
    ports:
      - host: 3001
        container: 3001
        proto: tcp
        firewall: true
    volume_root: "/home/damien/{{container_name}}/volumes"
    volumes:
      - host: "/home/damien/uptime-kuma/volumes/data"
        container: "/app/data"

  tasks:
    - name: Create directory root
      ansible.builtin.file:
        path: "{{ volume_root }}"
        state: directory
        mode: '0755'

    - name: Create directories
      become: true
      become_method: containers.podman.podman_unshare
      ansible.builtin.file:
        path: "{{ item.host }}"
        state: directory
        mode: '0755'
        owner: 0
        group: 0
      loop: "{{ volumes }}"

    - name: Create quadlet file
      containers.podman.podman_container:
        name: "{{ container_name }}"
        image: "{{ image }}"
        state: quadlet
        ports: "{{ ports | json_query('[].[host,container,proto]') | map('join','/') | map('regex_replace','/',':',count=1) }}" 
        volumes: "{{ volumes | json_query('[].[host,container]') | map('join',':') | map('regex_replace','^(.*)$','\\1:Z') }}"
        # restart_policy: always
        quadlet_options:
          - AutoUpdate=registry
          - |
            [Install]
            WantedBy=default.target
          - |
            [Service]
            Restart=always
      notify: Restart quadlet

    - name: Create firewall service
      ansible.builtin.include_role:
        name: linux-system-roles.firewall
        apply:
          become: true
      vars:
        firewall:
          - service: "{{ container_name }}"
            short: "{{ container_name }}"
            description: "Ports for container: {{ container_name }}"
            port: "{{ ports | selectattr('firewall') | json_query('[].[host,proto]') | map('join','/') }}"
            state: present
            permanent: true

    - name: Activate firewall service
      become: true
      ansible.posix.firewalld:
        service: "{{ container_name }}"
        state: enabled
        permanent: true
        immediate: true

  handlers:
    - name: Restart quadlet
      ansible.builtin.systemd_service:
        daemon_reload: true
        name: "{{ container_name }}"
        state: started
        scope: user

...
